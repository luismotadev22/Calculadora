import unittest
import math
from main import calculadora, calculadora_v2, calculadora_v3, calculadora_v4


class TestCalculadora(unittest.TestCase):

  def teste_operacoes_basicas(self):
        # Teste operações básicas de cada operador + - * / % ^
        self.assertEqual(calculadora(2, 3, '+'), 5)
        self.assertEqual(calculadora(5, 3, '-'), 2)
        self.assertEqual(calculadora(4, 3, '*'), 12)
        self.assertEqual(calculadora(8, 2, '/'), 4)
        self.assertEqual(calculadora(9, 4, '%'), 1)
        self.assertEqual(calculadora(2, 3, '^'), 8)

def teste_v2_operacoes(self):
        # Teste operações básicas de cada operador + - * / % ^
        self.assertEqual(calculadora_v2(2, 3, '+'), 5)
        self.assertEqual(calculadora_v2(5, 3, '-'), 2)
        self.assertEqual(calculadora_v2(4, 3, '*'), 12)
        self.assertEqual(calculadora_v2(8, 2, '/'), 4)
        self.assertEqual(calculadora_v2(9, 4, '%'), 1)
        self.assertEqual(calculadora_v2(2, 3, '^'), 8)
        
def teste_v3_operacoes(self):
        # Teste operações básicas de cada operador + - * / % ^
        self.assertEqual(calculadora_v3(2, 3, '+'), 5)
        self.assertEqual(calculadora_v3(5, 3, '-'), 2)
        self.assertEqual(calculadora_v3(4, 3, '*'), 12)
        self.assertEqual(calculadora_v3(8, 2, '/'), 4)
        self.assertEqual(calculadora_v3(9, 4, '%'), 1)
        self.assertEqual(calculadora_v3(2, 3, '^'), 8)

def teste_v4_operacoes(self):
        # Teste operações básicas de cada operador + - * / % ^
        self.assertEqual(calculadora_v4(2, 3, '+'), 5)
        self.assertEqual(calculadora_v4(5, 3, '-'), 2)
        self.assertEqual(calculadora_v4(4, 3, '*'), 12)
        self.assertEqual(calculadora_v4(8, 2, '/'), 4)
        self.assertEqual(calculadora_v4(9, 4, '%'), 1)
        self.assertEqual(calculadora_v4(2, 3, '^'), 8)

def teste_operacoes_diversas(self):
        # Teste divisão por zero operador para todas versões / %
        for func in [calculadora, calculadora_v2, calculadora_v3, calculadora_v4]:
            self.assertTrue(math.isnan(func(5, 0, '/')))
            self.assertTrue(math.isnan(func(5, 0, '%')))

            # Teste operador inválido
            self.assertTrue(math.isnan(func(2, 3, '$')))
            self.assertTrue(math.isnan(func(2, 5, '#')))
            self.assertTrue(math.isnan(func(0, 2, 'qwe')))

            # Teste números de vírgula flutuante
            self.assertAlmostEqual(func(2.5, 1.5, '+'), 4.0)
            self.assertAlmostEqual(func(4.5, 1.5, '-'), 3.0)
            self.assertAlmostEqual(func(5.5, 1.5, '*'), 8.25)

            # Teste números negativos
            self.assertEqual(func(-2, 3, '*'), -6)

            # Teste números negativos com divisão e módulo
            self.assertEqual(func(-6, 3, '/'), -2.0)
            self.assertEqual(func(-7, 3, '%'), 2.0)

            # Teste números negativos com exponenciação
            self.assertEqual(func(-2, 3, '^'), -8)

            # Teste números negativos com exponenciação de zero
            self.assertEqual(func(0, 3, '^'), 0)


if __name__ == '__main__':
    unittest.main()

# para correr os testes: python -m unittest -v testes_main_alunos.py
